* symmolint.cpp
** perfomance for matrix
   おそいと感じたら改善しよう。
   
   1. 対角要素行列に対してまじめに計算しているので、楽をしよう
   2. クーロンを計算するかしないかのスイッチを導入する。(適用済み)
   3. 他のSymGTOsオブジェクトとの行列の計算を導入。(適用済み)
   
** DONE python bindで見やすくなるように
   CLOSED: [2016-03-19 Sat 03:45]
   pythonで使うときにDSLになるようにメソッドを追加しよう
   データ構造は変えなくていいだろう。

   #+begin_src python
gtos = SymGTOs(Cs())
       .sub(Sub()
            .xyz( 0, 0, +1)
            .xyz( 0, 0, -1)
            .nxyz(1, 0, 0)
            .nxyz(0, 1, 0)
            .nxyz(0, 0, 1)
            .zeta([2.0**n for n in range(-5, 5)])
            .rds( Cs_Ap(), [[1, 0, 0], [-1, 0, 0]])
            .rds( Cs_Ap(), [[1, 0, 0], [-1, 0, 0]]))
       .sub(Sub()
            .xyz(0, 0, 0)
            .nxyz(0, 0, 0)
            .zeta([2.0**n for n in range(-5, 5)])
            .rds( Cs_App(), [[1.0]]))
       .atom((0,0,0.5), 1)
       .atom((0,0,-0.5), 1)
       .setup()
   #+end_src

   結構簡単に実装できる？

** 行列に追加する操作をまとめる。
   xyzq_iat
   xyz_iat
   などに同じようなソースが続いている。

** struct -> class
   だんだん単純な構造ではなくなってるから、変数名をしっかりしようとしたけど
   計算部分を変えるのがめんどくさいから見送る。

** DONE SetUp
   CLOSED: [2016-03-19 Sat 03:45]
   SubSymGTOsとSymGTOsでSetUpを実装しているが、
   その呼び出すタイミングを考える。
   SymGTOs::AddSub
   で呼ぶのか
   SymGTOs::SetUp
   でまとめて呼ぶのか。

** removed old
   to be removedでマークした部分を消す

** DONE BMatSets
   CLOSED: [2016-03-19 Sat 03:45]
   swapの実装でコピーを回避
   コピーコンストラクタの禁止
   
** DONE data check
   CLOSED: [2016-03-19 Sat 03:45]
   SetUpでデータ構造をチェック。
   大きさ０になっていないか。複数のデータに矛盾はないか。SetUpが呼ばれているか。

** DONE remove raw pointer
   CLOSED: [2016-03-19 Sat 03:45]
   ポインターを露わに使っている部分を治したい。
   MultArrayをstd::vectorのように拡張する？
   CalcMatを整理したい。（できるかな？）
** DONE 名前：ReductionSets
   CLOSED: [2016-03-22 Tue 10:47]
   rds
   ReductionSets
   Reduction
   などいろいろ混ざっている。どういう名前がいいかは、最後のPython-bind
   したときに使いやすいようにする。内部変数も合わせていこう。
** function describe
   関数の説明書きを追加したい。
   minieigenとかを見ればわかるはず。
   
** DONE BMatSets
   []演算子でアクセスしたい。
   mat["s", Ap, Ap]
   など。

** DONE correct sign
   CLOSED: [2016-03-22 Tue 10:47]
   波動関数に含まれる符号の任意性を訂正する仕組みを実装したい。
   一階微分が正になればよし。

   #+begin_src python
...
(eigvals, eigvecs) = ceig(H, S)
c0 = gtos.correct_sign(eigvecs.col(0))
...
   #+end_src 
** DONE AtR_Ylm for higher moment
   CLOSED: [2016-03-19 Sat 03:44]
** DONE special function
   CLOSED: [2016-03-19 Sat 03:44]
   legendre, special harmonicsなどまとめる。
   angmomentなど、いまは散らばっている。
** Write Readme.md file
   symmolintについてまとめておく。
   
** DONE make file option
   CLOSED: [2016-03-27 Sun 11:52]
   高速バージョンと低速バージョンをコンパイルしたい。
   高速バージョンをコンパイルするときに、MultArray<F, N>の境界チェックを取り外したい。
   
** add const
** iterator for GTO pair
   例えば、行列要素を計算するためのループ構造だけを記述しておいて、
   そのループごとの値を取ってくるiteratorを定義して、pythonに渡せば、
   python再度ですきな行列の計算がそこそこ速くできるのではないか。
   どちらかと言うと、Lambda expressionが適切か。
   python bindとの兼ね合いは？

   #+begin_src c++
struct GTOPair {
  int nAx, nAy, nAz, nBx, nBy, nBz;
  dcomplex wAx, wAy, wAz, ...
}
for(vector<GTOPair>::const_iterator it = gtos.pair_begin(), 
    end = gtos.pair_end(); it != end; ++it) {

  it->nAx
  it->nBx
  ...
}
   #+end_src
   
* other
** rename eigen_plus.cpp
   対角化の関数名をどうにかしたい。
   
* General
** DONE directory
   CLOSED: [2016-03-27 Sun 11:52]
   build directoryをつくろうかな。
   
** memory allocation at one time
   例えばSymMolintでAddするたびに、必要なメモリを確保しておいて、
   オブジェクトを破壊するまでとっておく。

   数値微分を計算するときにその都度、オブジェクトを作るのではなく、
   値の変更を駆使して確保したBuffer領域は変化しないようにする。

** MatrixXi in minieign
   on cpp side, argument written as
   const MatrixXi& does not support
   
